<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zu3zz.coding.me</id>
    <title>风袖</title>
    <updated>2020-01-10T16:37:06.949Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zu3zz.coding.me"/>
    <link rel="self" href="https://zu3zz.coding.me/atom.xml"/>
    <subtitle>烟蛾敛略不胜态，风袖低昂如有情</subtitle>
    <logo>https://zu3zz.coding.me/images/avatar.png</logo>
    <icon>https://zu3zz.coding.me/favicon.ico</icon>
    <rights>All rights reserved 2020, 风袖</rights>
    <entry>
        <title type="html"><![CDATA[Scala学习笔记（7）---- Scala隐式转换]]></title>
        <id>https://zu3zz.coding.me/post/scala-7</id>
        <link href="https://zu3zz.coding.me/post/scala-7">
        </link>
        <updated>2020-01-10T16:34:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="scala隐式转换">Scala隐式转换</h1>
<h2 id="1-隐式转换概念">1. 隐式转换概念</h2>
<ul>
<li>隐式转换就是将一个类赋予另外一个类中的属性和能力</li>
</ul>
<h2 id="2-例子">2. 例子</h2>
<ul>
<li>将所有隐式转换的方法单独放到一个文件中</li>
</ul>
<pre><code class="language-scala">// ImplicitApp.scala
import java.io.File
/**
 * Author: 3zZ.
 * Date: 2020/1/10 11:15 下午
 */
object ImplicitAspect {
  // 定义隐式转换函数即可
  // 案例1 将只有eat方法的普通人变成有fly方法的超人
  implicit def man2superman(man:Man): Superman = new Superman(man.name)
  // 案例2 为File对象添加直接读的方法
  implicit def file2Richfile(file: File): Richfile = new Richfile(file)
}
</code></pre>
<ul>
<li>在需要使用的文件进行引入</li>
</ul>
<pre><code class="language-scala">import java.io.File
import ImplicitAspect._
/**
 * Author: 3zZ.
 * Date: 2020/1/10 11:00 下午
 */
object ImplicitApp extends App {
  // 定义隐式转换函数即可
  // 案例1
  val man = new Man(&quot;3z&quot;)
  man.fly() // 能够成功飞行
  // 案例2 为File对象添加直接读的方法
  val file = new File(&quot;/Users/3zz/Desktop/test.txt&quot;)
  file.read() // 能够正常读出文件
}
class Man(val name: String) {
  def eat(): Unit = {
    println(s&quot;man $name is eating&quot;)
  }
}
class Superman(val name: String) {
  def fly(): Unit = {
    println(s&quot;superman $name is flying&quot;)
  }
}
class Richfile(val file:File){
  def read() ={
    scala.io.Source.fromFile(file.getPath).mkString
  }
}
</code></pre>
<h2 id="3-隐式参数例子">3. 隐式参数例子</h2>
<pre><code class="language-scala">/**
 * Author: 3zZ.
 * Date: 2020/1/10 11:00 下午
 */
object ImplicitApp extends App {
  implicit val test = &quot;test&quot;
  def testParam(implicit name:String ): Unit ={
    println(name)
  }
//  testParam 什么都不填会报错 (如果在上面定义了test 就不会报错)
//  testParam(&quot;123&quot;) 正常输出 123
  implicit val name1: String = &quot;implicit_name&quot;
  testParam // 此时有了implicit 就不会报错 正常输出 implicit_name
  testParam(&quot;3z&quot;) // 输出 3z
  implicit val s1 = &quot;s1&quot;
  implicit val s2 = &quot;s3&quot;
  testParam // 此时会报错 因为有两个不确定
}
</code></pre>
<h2 id="4-隐式类例子">4. 隐式类例子</h2>
<pre><code class="language-scala">/**
 * Author: 3zZ.
 * Date: 2020/1/10 11:32 下午
 */
object ImplicitClassApp extends App {
  implicit class Cal(x:Int){
    def add(a:Int) = a + x
  }
  // 1本身是没有add方法的
  // 上面的隐式类为所有的Int类型添加了add方法
  println(1.add(3)) // 4
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Scala学习笔记（6）---- Scala函数高级操作]]></title>
        <id>https://zu3zz.coding.me/post/scala-6</id>
        <link href="https://zu3zz.coding.me/post/scala-6">
        </link>
        <updated>2020-01-06T16:31:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="scala-函数高级操作">Scala 函数高级操作</h2>
<h2 id="1-字符串高级操作">1. 字符串高级操作</h2>
<pre><code class="language-scala">/**
 * Author: 3zZ.
 * Date: 2020/1/10 6:59 下午
 */
object StringApp extends App{
  val s = &quot;Hello:&quot;
  val name = &quot;3z&quot;
  println(s&quot;Hello:${name}&quot;) // 插值表达式
  val b =
    &quot;&quot;&quot;
      |这是一个多行字符串
      |hello
      |world
      |&quot;&quot;&quot;.stripMargin
  println(b)
}
// 输出
Hello:3z

这是一个多行字符串
hello
world
</code></pre>
<h2 id="2-匿名函数">2. 匿名函数</h2>
<pre><code class="language-scala">/**
 * Author: 3zZ.
 * Date: 2020/1/2 10:30 下午
 * 匿名函数：函数是可以命名的，也可以不命名
 * (参数名：参数类型...) =&gt; 函数体
 */
object FunctionApp extends App {
  val m1 = (x:Int) =&gt; x+1
  println(m1(10)) // 11
  def add = (x:Int, y:Int) =&gt; {x+y}
  println(add(1,2)) // 3
}
</code></pre>
<h2 id="3-curry函数">3. <code>Curry</code>函数</h2>
<pre><code class="language-scala">/**
 * Author: 3zZ.
 * Date: 2020/1/2 10:30 下午
 */
object FunctionApp extends App {
  def sum(a:Int, b:Int) = a+b
  println(sum(1,2))
  // 将原来接收两个参数的一个函数，转换成2个
  def sum2(a:Int)(b:Int) = a + b
  println(sum(1,2))
}
</code></pre>
<h2 id="4-高阶函数">4. 高阶函数</h2>
<ol>
<li><code>map</code></li>
<li><code>filter</code></li>
<li><code>flatmap</code></li>
<li><code>foreach</code></li>
<li><code>reduce</code></li>
</ol>
<pre><code class="language-scala">/**
 * Author: 3zZ.
 * Date: 2020/1/2 10:30 下午
 */
object FunctionApp extends App {
  val l = List(1,2,3,4,5,6,7,8)
  // map: 逐个去操作集合中的每个元素
  l.map((x:Int) =&gt; x+1)
  l.map(x =&gt; x - 1) // 如果只有一个参数 括号可以省略
  l.map(_*2).filter(_ &gt; 8).foreach(println)// 每一个元素 * 2
  l.take(4) // 取前4个
  l.reduce(_+_) // 1 + 2 = 3 + 3 = 6 + 4 = 10...
  l.reduceLeft(_-_) // ((((1-2)-3)-4)-5)
  l.reduceRight(_-_) // (1-(2-(3-(4-5))))
  l.fold(0)(_-_)
  l.foldLeft(0)(_-_)
  l.foldRight(0)(_-_)
  val f = List(List(1,2),List(3,4),List(5,6))
  f.flatten // List(1, 2, 3, 4, 5, 6)
  f.map(_.map(_*2)) // List(List(2,4),List(6,8),List(10,12))
  f.flatMap(_.map(_*2)) // List(2, 4, 6, 8, 10, 12) == flatten + map
}

</code></pre>
<ul>
<li>
<p>一个简单wordcount的案例</p>
<pre><code class="language-scala">val txt = scala.io.Source.fromFile(&quot;wordcount.txt&quot;).mkString
val txts = List(txt)
txts.flatMap(_.split(&quot;,&quot;)).map(x =&gt; (x,1)).groupBy(_._1).mapValues(_.size)
// scala.collection.immutable.Map[String,Int] = Map(world -&gt; 1, hello -&gt; 2)
</code></pre>
</li>
</ul>
<h2 id="5-偏函数">5. 偏函数</h2>
<ul>
<li>偏函数的定义：被包在花括号类内没有match的一组case语句</li>
</ul>
<pre><code class="language-scala">package com.zth.fun

import scala.util.Random

/**
 * Author: 3zZ.
 * Date: 2020/1/10 10:49 下午
 * 偏函数：被包在花括号类内没有match的一组case语句
 */
object PartitalFunctionApp extends App {
  // 普通match函数
  val names = Array(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)
  val name = names(Random.nextInt(names.length))
  name match {
    case &quot;a&quot; =&gt; println(&quot;1&quot;)
    case &quot;b&quot; =&gt; println(&quot;2&quot;)
    case _ =&gt; println(&quot;others&quot;)
  }
  // 偏函数
  // A: 输入参数类型 B: 输出参数类型
  def sayChinese:PartialFunction[String, String] = {
    case &quot;a&quot; =&gt; &quot;1&quot;
    case &quot;b&quot; =&gt; &quot;2&quot;
    case _ =&gt; &quot;others&quot;
  }
  println(sayChinese(&quot;a&quot;))
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Scala学习笔记（5）---- Scala集合]]></title>
        <id>https://zu3zz.coding.me/post/scala-5</id>
        <link href="https://zu3zz.coding.me/post/scala-5">
        </link>
        <updated>2020-01-04T16:29:40.000Z</updated>
        <content type="html"><![CDATA[<h1 id="scala集合">Scala集合</h1>
<h2 id="1-数组">1. 数组</h2>
<h3 id="11-定长数组array">1.1 定长数组<code>Array</code></h3>
<pre><code class="language-scala">/**
 * Author: 3zZ.
 * Date: 2020/1/8 7:56 下午
 */
object ArrayApp extends App {
  val a = new Array[String](5) // Array(null,...null)
  a.length // 5
  a(1) = &quot;hello&quot;
  a(1) // String = &quot;hello&quot;
  val b = Array(&quot;hadoop&quot;, &quot;spark&quot;, &quot;storm&quot;)
  b(1) = &quot;flink&quot;
  b // Array(hadoop, flink, storm)
  val c = Array(2,3,4,5,6,7,8,9)
  c.sum // Int = 44
  c.min // Int = 9
  c.max // Int = 2
  c.mkString // String = 23456789
  c.mkString(&quot;,&quot;) //String = 2,3,4,5,6,7,8,9
  c.mkString(&quot;&lt;&quot;,&quot;,&quot;,&quot;&gt;&quot;) // String = &lt;2,3,4,5,6,7,8,9&gt;
  c.toString // String = [I@44e3760b
}
</code></pre>
<h3 id="12-变长数组arraybuffer">1.2 变长数组<code>ArrayBuffer</code></h3>
<pre><code class="language-scala">/**
 * Author: 3zZ.
 * Date: 2020/1/8 7:56 下午
 */
object ArrayApp extends App {
  val c = scala.collection.mutable.ArrayBuffer[Int]()
  c += 1 // ArrayBuffer(1)
  c += (2,3,4,5) // ArrayBuffer(1, 2, 3, 4, 5)
  c ++= Array(6,7,8) // ArrayBuffer(1, 2, 3, 4, 5, 6, 7, 8)
  c.insert(0,0) // ArrayBuffer(0, 1, 2, 3, 4, 5, 6, 7, 8)
  c.remove(1) // ArrayBuffer(0, 2, 3, 4, 5, 6, 7, 8)
  c.remove(0,3) // ArrayBuffer(4, 5, 6, 7, 8)
  c.trimEnd(2) // ArrayBuffer(4, 5, 6)
  c.toArray.mkString // 456(Array类型)
  for(ele &lt;- c){
    println(ele) // 遍历 4 5 6
  }
  for(i &lt;- (0 until c.length).reverse) {
    println(c(i)) // 逆序 6 5 4
  }
}
</code></pre>
<h2 id="2-list">2. List</h2>
<ul>
<li>有序的</li>
<li>可以重复的</li>
</ul>
<h3 id="21-nil是什么">2.1 Nil是什么</h3>
<pre><code class="language-scala">scala&gt; Nil
scala.collection.immutable.Nil.type = List()
</code></pre>
<ul>
<li><code>Nil</code>就是一个空的<code>List</code></li>
</ul>
<h3 id="22-list使用">2.2 List使用</h3>
<pre><code class="language-scala">/**
 * Author: 3zZ.
 * Date: 2020/1/9 4:57 下午
 */
object ListApp extends App {
  val l = List(1,2,3,4,5) // l: List[Int] = List(1, 2, 3, 4, 5)
  l.head // Int = 1
  l.tail // List[Int] = List(2, 3, 4, 5)
  val l2 = 1 :: Nil // l2: List[Int] = List(1)
  val l3 = 2 :: l2 //  l3: List[Int] = List(2, 1)
  val l4 = 1 :: 2 :: 3 :: Nil // l4: List[Int] = List(1, 2, 3)
  val l5 = scala.collection.mutable.ListBuffer[Int]()
  l5 +=  2 // ListBuffer(2)
  l5 += (3,4,5) // ListBuffer(2, 3, 4, 5)
  l5 ++= List(6,7,8) // ListBuffer(2, 3, 4, 5, 6, 7, 8)
  l5 -= 2 // ListBuffer(3, 4, 5, 6, 7, 8)
  l5 -= (1,4) // ListBuffer(2, 3, 5, 6, 7, 8)
  l5 --= List(2,3,5,6) // ListBuffer(7, 8)
  l5.toList // List[Int] = List(7, 8)
  l5.toArray // Array[Int] = Array(1, 3, 4, 5)
  l5.head // Int = 1
  l5.isEmpty // Boolean = false
  l5.tail // scala.collection.mutable.ListBuffer[Int] = ListBuffer(3, 4, 5)
  l5.tail.head // Int = 3
  
  def sum(nums:Int*):Int = {
    if(nums.length == 0){
      0
    } else{
      nums.head + sum(nums.tail:_*) // 自动把Seq转换为Int*
    }
  }
  sum(1,2,3,4) // Int = 10
}
</code></pre>
<h2 id="3-set">3. Set</h2>
<ul>
<li>无序的</li>
<li>不可重复的</li>
</ul>
<pre><code class="language-scala">/**
 * Author: 3zZ.
 * Date: 2020/1/9 6:24 下午
 */
object SetApp extends App{
  val set = scala.collection.mutable.Set[Int]()
  set += 1 // set.type = Set(1)
  set += (2,1) // set.type = Set(1,2)
}

</code></pre>
<ul>
<li>其他用法基本与<code>List</code>相同</li>
</ul>
<h2 id="4-map">4. Map</h2>
<h2 id="5-option-some-none">5. Option &amp; Some &amp; None</h2>
<h2 id="6-tuple">6. Tuple</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Scala学习笔记（4）---- Scala模式匹配]]></title>
        <id>https://zu3zz.coding.me/post/scala-4</id>
        <link href="https://zu3zz.coding.me/post/scala-4">
        </link>
        <updated>2020-01-03T16:28:06.000Z</updated>
        <content type="html"><![CDATA[<h1 id="scala-模式匹配">Scala 模式匹配</h1>
<h2 id="1-基本模式匹配">1. 基本模式匹配</h2>
<ol>
<li>
<p><code>Java</code>中： 对一个值进行条件判断，返回针对不同的条件进行不同的处理：<code>switch case</code></p>
</li>
<li>
<p><code>scala</code>中：</p>
<pre><code class="language-scala">变量 match {
  case value1 ==&gt; 代码1
  case value2 ==&gt; 代码2
  ....
  case _ =&gt; 代码N
}
</code></pre>
</li>
<li>
<p>一个栗子</p>
<pre><code class="language-scala">import scala.util.Random
/**
 * Author: 3zZ.
 * Date: 2020/1/10 12:10 上午
 */
object MatchApp extends App {
  val names = Array(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)
  val name = names(Random.nextInt(names.length))
  name match{
    case &quot;a&quot; =&gt; println(1)
    case &quot;b&quot; =&gt; println(2)
    case _ =&gt; println(&quot;不知道&quot;)
  }
  def judgeGrade(grade: String): Unit ={
    grade match{
      case &quot;A&quot; =&gt; println(&quot;Excellent..&quot;)
      case &quot;B&quot; =&gt; println(&quot;Good..&quot;)
      case &quot;C&quot; =&gt; println(&quot;Just so so..&quot;)
      case _ =&gt; println(&quot;u need worker harder&quot;)
    }
  }
  judgeGrade(&quot;A&quot;)
  judgeGrade(&quot;C&quot;)
  judgeGrade(&quot;G&quot;)
}
// 输出结果
1
Excellent..
Just so so..
u need worker harder
</code></pre>
</li>
</ol>
<h2 id="2-加条件">2. 加条件</h2>
<ul>
<li>
<p>双重过滤</p>
<pre><code class="language-scala">/**
 * Author: 3zZ.
 * Date: 2020/1/10 12:10 上午
 */
object MatchApp extends App {
  def judgeGrade(name:String, grade: String): Unit ={
    grade match{
      case &quot;A&quot; =&gt; println(&quot;Excellent..&quot;)
      case &quot;B&quot; =&gt; println(&quot;Good..&quot;)
      case &quot;C&quot; =&gt; println(&quot;Just so so..&quot;)
      case _ if(name == &quot;lisi&quot;) =&gt; println(name + &quot; u need worker harder&quot;)
      case _  =&gt; println(&quot;u need worker harder&quot;)
    }
  }
  judgeGrade(&quot;zhangsan&quot;,&quot;D&quot;)
  judgeGrade(&quot;lisi&quot;,&quot;D&quot;)// 双重过滤
}
// 输出
u need worker harder
lisi u need worker harder
</code></pre>
</li>
</ul>
<h2 id="3-数组array中的过滤">3. 数组(Array)中的过滤</h2>
<pre><code class="language-scala">/**
 * Author: 3zZ.
 * Date: 2020/1/10 12:10 上午
 */
object MatchApp extends App {
  def greeting(array: Array[String]): Unit = {
    array match {
      case Array(&quot;zhangsan&quot;) =&gt; println(&quot;hello zhangsan&quot;)
      case Array(x, y) =&gt; println(&quot;hi: &quot; + x +&quot; and &quot; + y)
      case Array(&quot;zhangsan&quot;, _*) =&gt; println(&quot;hi: zhangsan and other&quot;)
      case _ =&gt; println(&quot;hi everybody&quot;)
    }
  }
  greeting(Array(&quot;zhangsan&quot;))
  greeting(Array(&quot;zhangsan&quot;, &quot;lisi&quot;))
  greeting(Array(&quot;zhangsan&quot;, &quot;lisi&quot;, &quot;wangwu&quot;))
}
// 返回结果
hello zhangsan
hi: zhangsan and lisi
hi: zhangsan and other
</code></pre>
<h2 id="4-list中的过滤">4. List中的过滤</h2>
<pre><code class="language-scala">/**
 * Author: 3zZ.
 * Date: 2020/1/10 12:10 上午
 */
object MatchApp extends App {
  def greeting(list: List[String]): Unit = {
    list match {
      case &quot;zhangsan&quot; :: Nil =&gt; println(&quot;Hi: zhangsan&quot;)
      case x :: y :: Nil =&gt; println(&quot;Hi:&quot; + x + &quot; , &quot; + y)
      case &quot;zhangsan&quot;::tail =&gt; println(&quot;Hi: zhangsan and others&quot;)
      case _ =&gt; println(&quot;hi: everyone&quot;)
    }
  }
  greeting(List(&quot;zhangsan&quot;))
  greeting(List(&quot;zhangsan&quot;,&quot;lisi&quot;))
  greeting(List(&quot;zhangsan&quot;,&quot;lisi&quot;,&quot;wangwu&quot;))
  greeting(List(&quot;wangwu&quot;,&quot;zhangsan&quot;,&quot;lisi&quot;))
}
// 返回
Hi: zhangsan
Hi: zhangsan , lisi
Hi: zhangsan and others
hi: everyone
</code></pre>
<h2 id="5-类型匹配">5. 类型匹配</h2>
<pre><code class="language-scala">/**
 * Author: 3zZ.
 * Date: 2020/1/10 12:10 上午
 */
object MatchApp extends App {
  def matchType(obj: Any): Unit = {
    obj match {
      case x: Int =&gt; println(&quot;Int&quot;)
      case s:String =&gt; println(&quot;String&quot;)
      case m:Map[_,_] =&gt; m.foreach(println)
      case _ =&gt; println(&quot;other type&quot;)
    }
  }
  matchType(1)
  matchType(&quot;1&quot;)
  matchType(Map(&quot;name&quot; -&gt; &quot;a&quot;))
  matchType(1f)
}
// 返回
Int
String
(name,a)
other type
</code></pre>
<h2 id="6-异常处理">6. 异常处理</h2>
<pre><code class="language-scala">/**
 * Author: 3zZ.
 * Date: 2020/1/10 1:26 上午
 */
object ExceptionApp extends App {
  try {
    val i = 10 / 0
    println(i)
  } catch {
    case e: ArithmeticException =&gt; println(&quot;除数不能为0&quot;)
    case e: Exception =&gt; println(e.getMessage)
  } finally {
    // 释放资源
  }
}
</code></pre>
<ul>
<li>在catch中判断异常</li>
<li>在finally中释放资源</li>
</ul>
<h2 id="7-case-class中的匹配">7. Case Class中的匹配</h2>
<pre><code class="language-scala">/**
 * Author: 3zZ.
 * Date: 2020/1/10 1:26 上午
 */
object ExceptionApp extends App {
  def caseclassMatch(person: Person): Unit ={
    person match{
      case CTO(name, floor) =&gt; println(&quot;CTO name is &quot;+name+&quot; ,floor: &quot;+ floor)
      case Employee(name, floor) =&gt; println(&quot;Employee name is &quot;+name+&quot; ,floor: &quot;+ floor)
      case _ =&gt; println(&quot;other&quot;)
    }
  }
  class Person
  case class CTO(name:String, floor:String) extends Person
  case class Employee(name:String, floor:String) extends Person
  case class Other(name:String) extends Person
  caseclassMatch(CTO(&quot;3zz&quot;,&quot;22&quot;))
  caseclassMatch(Employee(&quot;zhangsan&quot;, &quot;2&quot;))
  caseclassMatch(Other(&quot;lisi&quot;))
}
// 返回
CTO name is 3zz ,floor: 22
Employee name is zhangsan ,floor: 2
other
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Scala学习笔记（3） ---- Scala对象]]></title>
        <id>https://zu3zz.coding.me/post/scala-3</id>
        <link href="https://zu3zz.coding.me/post/scala-3">
        </link>
        <updated>2020-01-03T15:42:39.000Z</updated>
        <content type="html"><![CDATA[<h1 id="scala面向对象">Scala面向对象</h1>
<h2 id="1-面向对象概述">1. 面向对象概述</h2>
<ol>
<li>Java / Scala OO(Objecet Orientaed)
<ul>
<li>封装：属性、方法封装到类中</li>
<li>继承：父类和子类之间的关系</li>
<li>多态：父类引用指向子类对象（重要）</li>
</ul>
</li>
</ol>
<h2 id="2-类的定义与使用">2. 类的定义与使用</h2>
<pre><code class="language-scala">/**
 * Author: 3zZ.
 * Date: 2020/1/3 4:55 下午
 */
object SimpleObjectApp {
  def main(args: Array[String]): Unit = {
    val person = new People()
    person.name = &quot;messi&quot;
//    person.age = 30
    println(person.name + &quot;..&quot; + person.age)
    println(&quot;invoke eat method:&quot;+person.eat())
    person.watchTv(&quot;basailuona&quot;)
    person.sex()
  }
}
class People{
  // 定义属性
  // var可以自动生成 getter 和 setter
  // _ 是占位符
  var name:String = _
  // val只能自动生成 getter
  val age:Int = 10
  private [this] val gender = &quot;male&quot;
  // 定义方法
  def eat():String = {
    name+ &quot;eat...&quot;
  }
  def sex(): Unit ={
    println(&quot;gender is &quot; + gender)
  }
  def watchTv(teamName:String): Unit ={
    println(name + &quot;is watching &quot; + teamName)
  }
}
// 返回
messi..10
invoke eat method:messieat...
messiis watching basailuona
gender is male
</code></pre>
<ul>
<li>占位符<code>_</code>
<ul>
<li>定义占位符必须使用<code>var</code></li>
<li>定义之前必须先确定变量的类型</li>
</ul>
</li>
<li><code>private [this]</code>关键字的变量
<ul>
<li>只能在类的内部被拿到</li>
</ul>
</li>
</ul>
<h2 id="3-构造器">3. 构造器</h2>
<pre><code class="language-scala">/**
 * Author: 3zZ.
 * Date: 2020/1/3 6:23 下午
 */
object ConstructorApp {
  def main(args: Array[String]): Unit = {
    val person = new Person(&quot;zhangsan&quot;, 30)
    println(person.school + &quot;: &quot;+person.name+&quot; : &quot;+ person.age)
    val person2 = new Person(&quot;3zz&quot;, 18,&quot;M&quot;)
    println(person2.school + &quot;: &quot;+person2.name+&quot; : &quot;+ person2.age+&quot;:&quot;+person2.gender)
  }
}
// 主构造器
class Person(val name:String, val age:Int){
  println(&quot;Constructor enter..&quot;)
  val school = &quot;ustc&quot;
  var gender:String = _
  // 附属构造器
  def this(name:String, age:Int, gender:String){
    this(name, age)// 附属构造器的第一行代码必须要调用主构造器或者其他附属构造器
    this.gender = gender
  }
  println(&quot;Constructor leave..&quot;)
}
// 返回结果
Constructor enter..
Constructor leave..
ustc: zhangsan : 30
Constructor enter..
Constructor leave..
ustc: 3zz : 18:M
</code></pre>
<ul>
<li>主构造器
<ul>
<li>class关键字后面括号内的内容</li>
</ul>
</li>
<li>附属构造器
<ul>
<li>类内部的<code>this()</code>方法，需要在第一行调用主构造器或者其他附属构造器</li>
</ul>
</li>
<li>需要注意的是，如果主构造器中的属性没有<code>val</code>或者<code>var</code>，类外部无法调用该属性</li>
</ul>
<h2 id="4-继承与重写">4. 继承与重写</h2>
<ol>
<li>继承</li>
</ol>
<pre><code class="language-scala">/**
 * Author: 3zZ.
 * Date: 2020/1/3 6:23 下午
 */
object ConstructorApp {
  def main(args: Array[String]): Unit = {
    val student = new Student(&quot;3z&quot;,18,&quot;CS&quot;)
    println(student.name+&quot; : &quot; + student.major)
  }
}
// 主构造器
class Person(val name:String, val age:Int){
  println(&quot;Constructor person enter..&quot;)
  val school = &quot;ustc&quot;
  var gender:String = _
  // 附属构造器
  def this(name:String, age:Int, gender:String){
    this(name, age)// 附属构造器的第一行代码必须要调用主构造器或者其他附属构造器
    this.gender = gender
  }
  println(&quot;Constructor person leave..&quot;)
}
class Student(name:String, age:Int,val major:String) extends Person(name, age){
  println(&quot;Constructor student enter..&quot;)
  println(&quot;Constructor student leave..&quot;)
}
</code></pre>
<ul>
<li>继承的时候还是属性需要注意
<ul>
<li>父类已经有的前面可以没有关键字</li>
<li>父类没有的需要添加<code>val</code>或者<code>var</code></li>
</ul>
</li>
</ul>
<ol start="2">
<li>重写：使用<code>override</code>关键字</li>
</ol>
<pre><code class="language-scala">/**
 * Author: 3zZ.
 * Date: 2020/1/3 6:23 下午
 */
object ConstructorApp {
  def main(args: Array[String]): Unit = {
    val student = new Student(&quot;3z&quot;,18,&quot;CS&quot;)
    println(student.name+&quot; : &quot; + student.major)
    println(student.toString)
  }
}
// 主构造器
class Person(val name:String, val age:Int){
  println(&quot;Constructor person enter..&quot;)
  val school = &quot;ustc&quot;
  println(&quot;Constructor person leave..&quot;)
}
class Student(name:String, age:Int,val major:String) extends Person(name, age){
  println(&quot;Constructor student enter..&quot;)
  // 重写父类中的school属性
  override val school = &quot;tsing&quot;
  // 重写Object类中的toString()方法
  override def toString: String = {
    &quot;name: &quot; + name +&quot;age :&quot;+age+&quot;school: &quot; + school
  }
  println(&quot;Constructor student leave..&quot;)
}
// 返回结果
Constructor person enter..
Constructor person leave..
Constructor student enter..
Constructor student leave..
3z : CS
name: 3zage :18school: tsing
</code></pre>
<h2 id="5-抽象类">5. 抽象类</h2>
<ol>
<li>类的一个或者多个方法没有完整的实现（只有定义，没有实现）</li>
</ol>
<pre><code class="language-scala">/**
 * Author: 3zZ.
 * Date: 2020/1/3 10:01 下午
 */
object AbstractApp {
  def main(args: Array[String]): Unit = {
    val student = new Student2()
    println(student.name)
    student.speak
  }
}
abstract class Person2{
  def speak
  val name:String
  val age:Int
}
// 需要重写抽象类中的方法和属性
class Student2 extends Person2 {
  override def speak: Unit = {
    println(&quot;speak&quot;)
  }
  override val name: String = &quot;3z&quot;
  override val age: Int = 18
}
</code></pre>
<h2 id="6-伴生类与apply">6. 伴生类与Apply</h2>
<ol>
<li>伴生类与伴生对象</li>
</ol>
<pre><code class="language-scala">/**
 * 如果有一个class， 还有一个与class同名的object
 * 那么就称这个object是class的伴生对象，class是object的伴生类
 */
// 伴生类
class ApplyTest{

}
// 伴生对象
object ApplyTest{

}
</code></pre>
<ol start="2">
<li>
<p><code>apply</code>方法</p>
<pre><code class="language-scala">/**
 * Author: 3zZ.
 * Date: 2020/1/3 10:33 下午
 */
object ApplyApp {
  def main(args: Array[String]): Unit = {
    for (i &lt;- 1 to 10) {
      ApplyTest.incr
    }
    println(ApplyTest.count) // 说明object本身是一个单例对象
    val b = ApplyTest() // ==&gt; 默认调用 Object.apply 方法
    println(&quot;---------------------------&quot;)
    val c = new ApplyTest()// 类名() ====&gt; Class.apply()
    println(c) // com.zth.fun.ApplyTest@68c4039c
    c()// 对象() ====&gt; Object.apply()
    // class applytest apply...
  }
}

/**
 * 如果有一个class， 还有一个与class同名的object
 * 那么就称这个object是class的伴生对象，class是object的伴生类
 */
// 伴生类
class ApplyTest {
  def apply() = {
    println(&quot;class applytest apply...&quot;)
  }
}
// 伴生对象
object ApplyTest {
  println(&quot;object applytest enter..&quot;)
  var count = 0
  def incr = {
    count += 1
  }
  // 最佳实践：在Object的apply方法中去new Class
  def apply() = {
    println(&quot;object applytest apply&quot;)
    // 在object中的apply中new class
    new ApplyTest
  }
  println(&quot;object applytest leave..&quot;)
}
// 返回结果
object applytest enter..
object applytest leave..
object applytest apply
---------------------------
com.zth.fun.ApplyTest@68c4039c
class applytest apply...
</code></pre>
<ul>
<li>伴生对象<code>object</code>本身是一个单例对象，只会被调用一次</li>
<li><code>类名()</code> ====&gt; <code>Class.apply()</code></li>
<li><code>对象()</code> ====&gt; <code>Object.apply()</code></li>
<li><code>apply</code>方法的最佳实践是在伴生对象的<code>apply</code>方法中<code>new</code> 一个伴生类</li>
</ul>
</li>
</ol>
<h2 id="7-case-class">7. Case Class</h2>
<ol>
<li>通常用在模式匹配里面</li>
</ol>
<pre><code class="language-scala">/**
 * Author: 3zZ.
 * Date: 2020/1/3 11:23 下午
 */
// 通常用在模式匹配里面
object CaseClassApp {
  def main(args: Array[String]): Unit = {
    println(Dog(&quot;wangcai&quot;).name)
  }
}
// case class不用new
case class Dog(name:String)
</code></pre>
<h2 id="8-trait">8. Trait</h2>
<ol>
<li>
<p>相当于<code>Java</code>中的<code>interface</code></p>
</li>
<li>
<p><code>Scala</code>中如何实现多个接口的实现？</p>
<pre><code class="language-scala">trait xxx extends aTrait with BTrait
// 实际例子
class SparkConf(loadDefaults: Boolean)
	extends Cloneable with Logging with Serializable
</code></pre>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Scala学习笔记（2） ---- Scala函数]]></title>
        <id>https://zu3zz.coding.me/post/scala-2</id>
        <link href="https://zu3zz.coding.me/post/scala-2">
        </link>
        <updated>2020-01-02T16:10:37.000Z</updated>
        <content type="html"><![CDATA[<h1 id="scala函数">Scala函数</h1>
<h3 id="1-方法的定义和使用">1. 方法的定义和使用</h3>
<figure data-type="image" tabindex="1"><img src="https://zu3zz.coding.me/post-images/1577981513974.png" alt="" loading="lazy"></figure>
<ol>
<li>
<p>不需要<code>return</code></p>
</li>
<li>
<p>没有参数的时候可以不用括号</p>
<pre><code class="language-scala">def 方法名(参数名：参数类型): 返回值类型 = {
  // 括号内的叫做方法体
  
  // 方法体内的最后一行为返回值， 不需要使用return
}
</code></pre>
</li>
<li>
<p>一个例子</p>
<pre><code class="language-scala">/**
 * Author: 3zZ.
 * Date: 2020/1/2 10:30 下午
 */
object FunctionApp {
  def main(args: Array[String]): Unit = {
    println(add(2, 3))
    println(three())
    println(three) // 没有入参的函数 调用的时候 括号是可以省略的
    sayHello(&quot;zhangsan&quot;)
    sayHello
  }
  def add(x: Int, y: Int): Int = {
    x + y // 最后一行就是返回值
  }
  def three() = 1+2
  def sayHello(): Unit ={
    println(&quot;say hello&quot;)
  }
  def sayHello(name:String): Unit ={
    println(&quot;say hello &quot;+name)
  }
}

// 返回的结果如下
5
3
3
say hello zhangsan
say hello
</code></pre>
</li>
</ol>
<h3 id="2-默认参数-命名参数">2. 默认参数、命名参数</h3>
<ol>
<li>
<p>在函数定义时，允许指定参数的默认值</p>
</li>
<li>
<p>在参数调用的时候，可以指定名字改变参数的顺序</p>
</li>
<li>
<p>一个例子</p>
<pre><code class="language-scala">/**
 * Author: 3zZ.
 * Date: 2020/1/2 10:30 下午
 */
object FunctionApp {
  def main(args: Array[String]): Unit = {
    sayName()// 这里括号不能省略
    sayName(&quot;2yy&quot;)
    println(speed(100,10))
    println(speed(time = 5,distance = 100)) // 命名参数 可以将参数的顺序调换
  }

  def sayName(name:String=&quot;3zz&quot;): Unit ={
    println(name)
  }
  def speed(distance:Float, time:Float): Float ={
    distance / time
  }
}
// 返回的结果
3zz
2yy
10.0
20.0
</code></pre>
</li>
</ol>
<h3 id="3-可变参数">3. 可变参数</h3>
<ol>
<li>
<p><code>JDK5+</code>：可变参数</p>
</li>
<li>
<p>Spark-sql中源码</p>
<pre><code class="language-scala">// Dataset.scala文件中的select方法
@scala.annotation.varargs
def select(cols: Column*): DataFrame = withPlan {
  Project(cols.map(_.named), logicalPlan)
}

@scala.annotation.varargs
def select(col: String, cols: String*): DataFrame = select((col +: cols).map(Column(_)) : _*)
</code></pre>
</li>
<li>
<p>一个小例子</p>
<pre><code class="language-scala">/**
 * Author: 3zZ.
 * Date: 2020/1/2 10:30 下午
 */
object FunctionApp {
  def main(args: Array[String]): Unit = {
    println(sum2(1,3,5))
  }
  def sum2(numbers:Int*) = {
    var result = 0
    for(number &lt;- numbers){
      result+=number
    }
    result
  }
}
// 返回的结果
9
</code></pre>
</li>
</ol>
<h3 id="4-条件表达式">4. 条件表达式</h3>
<ul>
<li>和<code>Java</code>用法基本相同</li>
</ul>
<pre><code class="language-scala">val x = 1
if(x &gt; 0){
  true
} else {
  false
}
</code></pre>
<h3 id="5-循环表达式">5. 循环表达式</h3>
<ul>
<li>
<p><code>to</code>关键字：范围包含两边</p>
<pre><code class="language-scala">1 to 10
res0: scala.collection.immutable.Range.Inclusive = Range(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
// 包含了 1 和 10
// 另外一种写法
1.to(10)
res2: scala.collection.immutable.Range.Inclusive = Range(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
</code></pre>
</li>
<li>
<p><code>Range</code>关键字：左闭右开</p>
<pre><code class="language-scala">Range(1,10)
res1: scala.collection.immutable.Range = Range(1, 2, 3, 4, 5, 6, 7, 8, 9)
// 没有10
Range(1,10,2)
res3: scala.collection.immutable.Range = Range(1, 3, 5, 7, 9)
</code></pre>
</li>
<li>
<p><code>until</code>关键字：左闭右开</p>
<pre><code class="language-scala">1 until 10
res4: scala.collection.immutable.Range = Range(1, 2, 3, 4, 5, 6, 7, 8, 9)
</code></pre>
</li>
<li>
<p><code>for</code>循环 / <code>foreach</code>方法</p>
<pre><code class="language-scala">// 第一种方法 使用for循环
val courses = Array(&quot;1a&quot;,&quot;2b&quot;,&quot;3c&quot;,&quot;4d&quot;)
for(course &lt;- sources) {
  println(course)
}
// 输出 1a,2b,3c,4d
// 第二种方法 使用foreach
courses.foreach(course =&gt; println(course))
// =&gt; : 相当于将course作用上右边的函数 变成另外一个结果
// 输出 1a,2b,3c,4d
</code></pre>
</li>
<li>
<p><code>while</code>循环</p>
<pre><code class="language-scala">var (num, sum) = (100,0)
while(num &gt; 0){
  sum= sum + num
  num= num - 1
}
println(sum)
// 输出5050
</code></pre>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Scala学习笔记（1）---- Scala基础]]></title>
        <id>https://zu3zz.coding.me/post/scala-1</id>
        <link href="https://zu3zz.coding.me/post/scala-1">
        </link>
        <updated>2020-01-02T16:08:53.000Z</updated>
        <content type="html"><![CDATA[<h1 id="scala笔记">Scala笔记</h1>
<h2 id="1-学习scala的意义">1.  学习Scala的意义：</h2>
<ol>
<li>钱</li>
<li>做东西：Spark、Kafka、Flink 生态系统
<ul>
<li>优雅</li>
<li>开发速度</li>
<li>生态融合</li>
</ul>
</li>
</ol>
<h2 id="2-scala安装">2. Scala安装</h2>
<ol>
<li>Java 8</li>
<li>下载scala-2.11.8</li>
<li>解压scala</li>
<li>【可选】配置到环境变量</li>
<li>执行<code>scala</code></li>
</ol>
<h2 id="3-scala使用入门">3. Scala使用入门</h2>
<h3 id="31-scala-vs-java">3.1 Scala vs Java</h3>
<ol>
<li>
<p>Java HelloWorld</p>
<pre><code class="language-java">public class HelloWorld{
  public static void main(String[] args){
    System.out.println(&quot;Hello World&quot;);
  }
}
</code></pre>
</li>
<li>
<p>Scala HelloWorld</p>
<ul>
<li>scala每行代码并不强求使用<code>;</code>结束，但是Java是必须的</li>
</ul>
<pre><code class="language-scala">object HelloWorld{
  def main(args : Array[String]){
    println(&quot;Hello World&quot;)
  }
}
</code></pre>
</li>
</ol>
<h3 id="32-val-vs-var">3.2 val vs var</h3>
<ol>
<li>val：值（不可变）（优先使用）
<ul>
<li>Java 中的<code>final</code></li>
<li><code>val 值名称：类型 = xxx</code></li>
<li><code>val age:Int = 20</code></li>
</ul>
</li>
<li>var：变量（可变）
<ul>
<li><code>var name = &quot;zhangsi&quot;</code></li>
<li>可以修改name<code>name = &quot;zhangwu&quot;</code></li>
</ul>
</li>
</ol>
<h3 id="33-基本数据类型">3.3 基本数据类型</h3>
<ol>
<li>
<p>Byte / Char</p>
</li>
<li>
<p>Short / Int / Long / Float / Double</p>
</li>
<li>
<p>Boolean</p>
</li>
<li>
<p>类型转换</p>
<pre><code class="language-scala">val d:Float = 1.2f
val g:Double = 10.asInstanceOf[Double]
scala&gt; g
res0: Double = 10.0
</code></pre>
</li>
<li>
<p>判断类型是否一致</p>
<pre><code class="language-scala">val h = 10.isInstanceOf[Int]
h: Boolean = true
val h = 10.isInstanceOf[Double]
h: Boolean = false
</code></pre>
</li>
<li>
<p><code>lazy</code>关键字的使用</p>
<ul>
<li>可以延迟加载避免直接报错</li>
</ul>
<pre><code class="language-scala">scala&gt; lazy val a = 1
a: Int = &lt;lazy&gt;
scala&gt; a
res0: Int = 1
</code></pre>
</li>
<li>
<p>常用IDE</p>
<ul>
<li>IDEA</li>
<li>Eclipse ide scala</li>
<li>NetBeans（不常用）</li>
</ul>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[大数据学习(1) ---- Linux基础(1)]]></title>
        <id>https://zu3zz.coding.me/post/ruozedata-1</id>
        <link href="https://zu3zz.coding.me/post/ruozedata-1">
        </link>
        <updated>2019-12-10T15:11:25.000Z</updated>
        <content type="html"><![CDATA[<h1 id="大数据学习1-linux基础1">大数据学习（1）---- Linux基础（1）</h1>
<h2 id="1-提前准备">1. 提前准备</h2>
<ol>
<li>
<p>CentOS6.5 虚拟机 或者 CentOS7.x 云主机</p>
</li>
<li>
<p>Xshell软件、CRT、PUTTY 进行远程登录（Mac用户使用自带命令行）</p>
</li>
<li>
<p>使用ssh进行远程登录</p>
<pre><code class="language-shel">ssh root@10.211.55.5
登录linux虚拟机
</code></pre>
</li>
</ol>
<h2 id="2-常用linux命令">2. 常用Linux命令</h2>
<ol>
<li>
<p>pwd</p>
<pre><code class="language-shell">查看当前光标所在的目录
显示从根目录/开始 绝对路径
</code></pre>
</li>
<li>
<p>用户窥探</p>
<pre><code class="language-shell">root 超级管理员  123456      /root
zth 普通用户  界面创建   			/home/zth
lyj                        /home/lyj
xxx                        /home/xxx
默认系统是在/home目录下 除非指定用户的home目录为其他目录
</code></pre>
<ul>
<li>Linux系统的目录是从根目录开始 /</li>
</ul>
</li>
<li>
<p>ls: 查看</p>
<pre><code class="language-shell">ls / 只显示该目录下的文件或文件夹的名称
ls -l / 显示该目录下的文件或文件夹的明细信息

[root@hadoop001 zth]# ls -l /home
总用量 20
drwx------.  2 root root 16384 12月 10 17:28 lost+found
drwx------. 28 zth  zth   4096 12月 10 17:40 zth
权限          用户    用户组      时间         名称
</code></pre>
</li>
<li>
<p>cd: 切换目录</p>
<pre><code class="language-shell">cd /home

cd    		切家目录  
cd ~  		切家目录 ~标识
cd /root  用户的家目录的绝对路径

cd -    	回到上一次目录
cd ../  	回退上一层目录

cd ../../ 回退2个目录
</code></pre>
</li>
<li>
<p>路径</p>
<pre><code class="language-shell">绝对路径 /根目录开始
相对路径 不以/开始
[root@hadoop001 ~]# ls
anaconda-ks.cfg  Downloads           Music     Templates
Desktop          install.log         Pictures  Videos
Documents        install.log.syslog  Public
[root@hadoop001 ~]# cd Desktop/   相对
[root@hadoop001 Desktop]# 

[root@hadoop001 ~]# cd /root/Desktop/ 绝对
[root@hadoop001 Desktop]# 
</code></pre>
</li>
<li>
<p>clear: 清空屏幕</p>
</li>
<li>
<p>再讲 ls</p>
<ul>
<li>
<p>ls 命令简写（只有在linux中才行）</p>
<pre><code class="language-shell">ls -l ==&gt; ll
</code></pre>
</li>
<li>
<p>查看文件大小</p>
<pre><code class="language-shell">ll -h
</code></pre>
</li>
<li>
<p>查看文件夹或者文件的大小</p>
<pre><code class="language-shell">du -sh Desktop/
du -sh install.log
</code></pre>
</li>
<li>
<p>找出最新的文件或者文件夹</p>
<pre><code class="language-shell">ll -rt
ll -rt == ls -l -r -t == ls -lrt
</code></pre>
</li>
<li>
<p>查看隐藏文件或文件夹（隐藏是以 . 开头的文件或文件夹）</p>
<pre><code class="language-shell">ll -a
</code></pre>
</li>
</ul>
</li>
<li>
<p>创建文件夹</p>
<pre><code class="language-shell">mkdir bigdata 只能创建1个
mkdir -p bigdata/1/2 级联创建文件夹 串行
mkdir 4 5 6 并行
</code></pre>
</li>
<li>
<p>创建文件</p>
<ul>
<li>
<p>touch的形式创建</p>
<pre><code class="language-shell">touch zth.log 创建空文件
</code></pre>
</li>
<li>
<p>vi 的形式创建</p>
<pre><code class="language-shell">vi zth.log 创建文件 重要！！
1. 命令行模式 按 i 进入编辑模式
2. esc 回退到命令行模式
3. shift+:尾行模式  wq 保存退出
</code></pre>
</li>
</ul>
</li>
<li>
<p>cp: 拷贝 2 份，原有的还在</p>
<pre><code class="language-shell">cp zth.log bigdata/
cp -r 7 6/         文件夹拷贝 需要-r参数
</code></pre>
</li>
<li>
<p>mv: 移动 1 份，即原有的移动到新位置</p>
<pre><code class="language-shell">mv zth1.log 6                移动文件到新的地方 名称不变
mv zth2.log  6/zth123.log    移动文件到新的地方 改变zth2.log名称为zth123.log   
mv 8 6  移动文件夹
</code></pre>
</li>
<li>
<p>第一种命令帮助</p>
<pre><code class="language-shell">[root@hadoop001 ~]# ls --help
Usage: ls [OPTION]... [FILE]...
[]代表可以省略
ls
ls jepson.log jepson.log可以省略
ls -r -t			-r -t 就属于option
</code></pre>
</li>
<li>
<p>离线查看文件内容</p>
<ul>
<li>
<p>cat</p>
<pre><code class="language-shell">cat 文件内容一下子全部显示 适用字节内容较少
</code></pre>
</li>
<li>
<p>more</p>
<pre><code class="language-shell">more 文件内容一页一页的往下翻 按空格键往下 
回退不了 按q退出   适用字节内容稍多的 
</code></pre>
</li>
<li>
<p>less</p>
<pre><code class="language-shell">less 文件内容 一行行 按箭头上下滚动  按q退出
</code></pre>
</li>
<li>
<p>| 管道符</p>
<ul>
<li>前面的shell脚本的输出 作为后面命令的输入</li>
</ul>
</li>
<li>
<p>grep过滤</p>
<pre><code class="language-shell">grep -C 10 拿到前后上下文共 20 行

&gt; 重定向输出到文件  如果文件中有内容则覆盖
&gt; &gt; 追加
</code></pre>
</li>
<li>
<p>对文件的内容ERROR 定位错误</p>
<pre><code class="language-shell">假如文件假如100m+
cat install.log | grep -C 10 &quot;ERROR&quot;

假如 ERROR赛选的结果 特多 将结果保存到 error.log 中
cat install.log | grep -C 10 &quot;ERROR&quot; &gt; error.log
</code></pre>
</li>
</ul>
</li>
<li>
<p>实时查看</p>
<ol>
<li>主要使用 tail 命令</li>
</ol>
<pre><code class="language-shell">打开实时窗口查看log日志
tail -f tail1.log
tail -F tail2.log
-F = -f + retry
</code></pre>
<ul>
<li>试验一下</li>
</ul>
<pre><code class="language-shell">[root@hadoop001 ~]# echo &quot;123&quot; &gt;&gt; tail1.log 
[root@hadoop001 ~]# echo &quot;123&quot; &gt;&gt; tail2.log 
[root@hadoop001 ~]# echo &quot;4&quot; &gt;&gt; tail1.log 
[root@hadoop001 ~]# echo &quot;4&quot; &gt;&gt; tail2.log 
此时tail1.log 与 tail2.log都可以正常输出
</code></pre>
<ul>
<li>
<p>生产上 xxxx.log日志大小 100m 一般保留10份</p>
</li>
<li>
<p>如果将xxx.log 日志中内容移到xxx.log1中，此时 xxx.log 已经不存在</p>
</li>
<li>
<p>而 -f 打开的tail1.log 并不能检测到 log 文件的发生的变化</p>
</li>
<li>
<p>但是使用 -F 打开的tail2.log 文件 因为有 retry 可以检测文件发生的变化</p>
<pre><code class="language-shell">tail: 'tail2.log' has become inaccessible: No such file or directory
tail: 'tail2.log' has appeared;  following end of new file
</code></pre>
</li>
<li>
<p>说明-f 不够强大 文件只要被移走 就算新的一模一样 也不会实时监控<br>
反之-F 强大 实时监控</p>
</li>
<li>
<p>flume踩坑案例：tail -f<br>
http://flume.apache.org/releases/content/1.9.0/FlumeUserGuide.html#exec-source</p>
</li>
<li>
<p>特别需求： 查看倒数 50 行 只能用 f 不能用 F</p>
<pre><code class="language-shell">tail -50f xxx.log
</code></pre>
</li>
</ul>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[深入浅出MySQL(5) ---- MySQL常用函数]]></title>
        <id>https://zu3zz.coding.me/post/mysql-5</id>
        <link href="https://zu3zz.coding.me/post/mysql-5">
        </link>
        <updated>2019-11-04T16:21:19.000Z</updated>
        <content type="html"><![CDATA[<h1 id="深入浅出mysql5-mysql常用函数">深入浅出MySQL(5)-----MySQL常用函数</h1>
<h2 id="1-数学函数">1. 数学函数</h2>
<ol>
<li><code>CEIL()</code>:进一取整</li>
<li><code>FLOOR()</code> : 舍掉小数部分</li>
<li><code>ROUND()</code> : 四舍五入</li>
<li><code>TRUNCATE()</code> ： 截取小数点后几位</li>
<li><code>MOD()</code> ： 取余数</li>
<li><code>ABS()</code> ： 取绝对值</li>
<li><code>POWER()</code>： 幂运算</li>
<li><code>PI()</code>： 圆周率</li>
<li><code>RAND()</code>或者<code>RAND(X)</code>: 0-1之间的随机数</li>
<li><code>SIGN(X)</code>： 得到数字符号</li>
<li><code>EXP(X)</code>： 计算 e 的 x 次方</li>
</ol>
<h2 id="2-字符串函数">2. 字符串函数</h2>
<ol>
<li><code>CHAR_LENGTH('ABCD')</code>: 计算字符的长短</li>
</ol>
<p><em>-- 测试字符串函数</em></p>
<ol>
<li>
<p><code>CHAR_LENGTH()</code>:得到字符串的字符数</p>
<pre><code class="language-sql">SELECT CHAR_LENGTH('abc');
-- 返回3
</code></pre>
</li>
<li>
<p><code>LENGTH()</code>:返回字符串的长度</p>
<pre><code class="language-sql">SELECT LENGTH('abc');
-- 返回3
</code></pre>
<ul>
<li>如果是中文，则返回原来ASCII码的长度</li>
</ul>
</li>
<li>
<p><code>CONCAT(s1,s2,....)</code>:将字符串合并成一个字符串</p>
<pre><code class="language-sql">SELECT CONCAT('a','b','c');
-- 如果字符串中包含NULL，返回拼接结果就是NULL
-- 返回'abc'
SELECT CONCAT('a','b','c',null);
-- 返回 NULL
</code></pre>
</li>
<li>
<p><code>CONCAT_WS(x,s1,s2,s2....)</code>：以指定分隔符拼接字符串</p>
<pre><code class="language-sql">SELECT CONCAT_WS('-','a','b','c');
-- 如果null在拼接的内容中，则转化成空字符串
SELECT CONCAT_WS('-','a','b','c',null);
-- 如果分隔符为null，拼接的结果为null
SELECT CONCAT_WS(null,'a','b','c');
</code></pre>
</li>
<li>
<p>将字符串转换成大写或者小写 <code>UPPER() | UCASE() | LOWER() | LCASE()</code></p>
<pre><code class="language-sql">SELECT UPPER('hello king'),UCASE('hello imooc'),LOWER('HELLO ADMIN'),LCASE('HELLO EVERYBODY');
</code></pre>
</li>
<li>
<p>字符串的反转<code>REVERSE()</code></p>
<pre><code class="language-sql">SELECT REVERSE('abc');
</code></pre>
</li>
<li>
<p><code>LEFT()|RIGHT()</code>:返回字符串的前几个字符或者后几个字符</p>
<pre><code class="language-sql">SELECT LEFT('hello',2),RIGHT('hello',2);
</code></pre>
</li>
<li>
<p><code>LPAD()|RPAD():</code>用字符串填充到指定长度</p>
<pre><code class="language-sql">SELECT LPAD('abc',10,'?');
-- 返回'abc???????'
SELECT RPAD('abc',10,'!');
-- 返回'acb!!!!!!!'
</code></pre>
</li>
<li>
<p>去掉字符串两端的空格<code>TRIM() | LTRIM() | RTRIM():</code></p>
<pre><code class="language-sql">SELECT CONCAT('*',TRIM(' abc '),'*'),
CONCAT('*',LTRIM(' abc '),'*'),
CONCAT('*',RTRIM(' abc '),'*');
</code></pre>
</li>
<li>
<p><code>REPEAT()</code>:重复指定的次数</p>
<pre><code class="language-sql">SELECT REPEAT('hello',3);
</code></pre>
</li>
<li>
<p><code>REPLACE()</code>:字符串</p>
<pre><code class="language-sql">SELECT REPLACE('hello king','king','queen');
</code></pre>
</li>
<li>
<p>截取字符串<code>SUBSTRING()</code></p>
<pre><code class="language-sql">SELECT SUBSTRING('abcdef',1,3);
</code></pre>
</li>
<li>
<p>比较字符串<code>STRCMP()</code></p>
<pre><code class="language-sql">SELECT STRCMP('a','b');
</code></pre>
</li>
</ol>
<h2 id="3-日期时间函数">3. 日期时间函数</h2>
<ol>
<li>
<p>测试日期时间函数 &amp; 返回当前日期</p>
<pre><code class="language-sql">SELECT CURDATE(),CURRENT_DATE();
</code></pre>
</li>
<li>
<p>返回当前时间</p>
<pre><code class="language-sql">SELECT CURTIME(),CURRENT_TIME();
</code></pre>
</li>
<li>
<p>返回当前的日期时间</p>
<pre><code class="language-sql">SELECT NOW(),CURRENT_TIMESTAMP(),SYSDATE();
</code></pre>
</li>
<li>
<p>返回日期中的月份和月份的名称</p>
<pre><code class="language-sql">SELECT MONTH('2017-02-19');

SELECT MONTH(CURDATE()),MONTHNAME(CURDATE());
</code></pre>
</li>
<li>
<p>返回星期几</p>
<pre><code class="language-sql">SELECT DAYNAME(NOW());
</code></pre>
</li>
<li>
<p>返回一周内的第几天,0代表星期一</p>
<pre><code class="language-sql">SELECT DAYOFWEEK(NOW());

SELECT WEEK(NOW());

SELECT YEAR(NOW()),MONTH(NOW()),DAY(NOW()),HOUR(NOW()),MINUTE(NOW()),SECOND(NOW());
</code></pre>
</li>
<li>
<p><code>DATEDIFF()</code>计算两个日期相差的天数</p>
<pre><code class="language-sql">SELECT DATEDIFF('2017-03-06','2017-03-02');
</code></pre>
</li>
</ol>
<h2 id="4-其他常用函数">4. 其他常用函数</h2>
<ol>
<li>
<p>测试其它常用函数</p>
<pre><code class="language-sql">SELECT VERSION(),CONNECTION_ID();
SELECT USER(),CURRENT_USER(),SYSTEM_USER(),SESSION_USER();
</code></pre>
</li>
<li>
<p>得到上一步插入操作产生AUTO_INCREMENT的值*</p>
<pre><code class="language-sql">SELECT LAST_INSERT_ID();
</code></pre>
</li>
<li>
<p><code>PASSWORD()</code>:密码加密算法</p>
<pre><code class="language-sql">SELECT MD5('king');
SELECT PASSWORD('root');
</code></pre>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[深入浅出MySQL(4) ---- 常见数据操作]]></title>
        <id>https://zu3zz.coding.me/post/mysql-4</id>
        <link href="https://zu3zz.coding.me/post/mysql-4">
        </link>
        <updated>2019-11-01T10:41:53.000Z</updated>
        <content type="html"><![CDATA[<h1 id="深入浅出mysql4-常见数据操作">深入浅出MySQL(4)-----常见数据操作</h1>
<h2 id="1-添加记录">1. 添加记录</h2>
<ol>
<li>指定字段名称</li>
</ol>
<pre><code class="language-sql">INSERT [INTO] tbl_name [(col_name1,col_name2,...)] {VALUE|VALUES}(VALUES...);
</code></pre>
<ol start="2">
<li>不指定字段名称</li>
</ol>
<pre><code class="language-sql">INSERT tbl_name VALUE(value1,value2,...);
</code></pre>
<p>需要按照建表时的字段顺序给每一个字段赋值</p>
<ol start="3">
<li>列出指定字段</li>
</ol>
<pre><code class="language-sql">INSERT tbl_name(字段名称1,字段名称2,...) VALUES(值1,值2,...);
</code></pre>
<ol start="4">
<li>INSERT ... SET的形式</li>
</ol>
<pre><code class="language-sql">INSERT tbl_name SET 字段名称1=值1,字段名称2=值2,...;
</code></pre>
<ol start="5">
<li>INSERT ... SELECT</li>
</ol>
<pre><code class="language-sql">INSERT tbl_name[(字段名称...)] SELECT 字段名称1,字段名称2,... FROM tbl_name [WHERE 条件];
</code></pre>
<ol start="6">
<li>一次添加多条记录</li>
</ol>
<pre><code class="language-sql">INSERT tbl_name[(字段名称...)] VALUES(值1,值2,...),
(值1,值2,...),
(值1,值2,...)
</code></pre>
<h2 id="2-修改记录">2. 修改记录</h2>
<pre><code class="language-sql">UPDATE tbl_name SET 字段名称1=值1,字段名称2=值2 [WHERE 条件];
</code></pre>
<p>如果不加条件，整个表中的记录都会被更新</p>
<h2 id="3-删除记录">3. 删除记录</h2>
<ol>
<li>
<p>普通删除</p>
<pre><code class="language-sql">DELETE FROM tbl_name [WHERE 条件];
</code></pre>
</li>
<li>
<p>如果不添加条件，表中所有记录都会被删除</p>
</li>
<li>
<p>DELETE清空数据表的时候不会重置AUTO_INCREMENT的值，但是可以通过ALTER语句将其置为1</p>
<pre><code class="language-sql">ALTER TABLE tbl_name AUTO_INCREMENT = 值x;
</code></pre>
</li>
<li>
<p>彻底清空数据表</p>
<pre><code class="language-sql">TRUNCATE [TABLE] tbl_name;
</code></pre>
<ul>
<li>清空表中所有记录</li>
<li>会重置AUTO_INCREMENT的值</li>
</ul>
</li>
</ol>
<h2 id="4查询记录">4.查询记录</h2>
<pre><code class="language-sql">SELECT select_expr,... FROM tbl_name
[WHERE 条件]
[GROUP BY {col_name|position} HAVING 二次筛选]
[ORDER BY {col_name|position|expr} [ASC|DESC]]
[LIMIT 限制结果集的显示条数]
</code></pre>
<ol>
<li>
<p>查询表中所有记录</p>
<pre><code class="language-sql">SELECT * FROM tbl_name;
</code></pre>
<p>*<strong>表示所有字段</strong></p>
</li>
<li>
<p>指定字段的信息</p>
<pre><code class="language-sql">SELECT 字段名称1,字段名称2,... FROM tbl_name;
</code></pre>
</li>
<li>
<p>使用库名.表名的形式，不用打开此数据库</p>
<pre><code class="language-sql">SELECT 字段名称1,字段名称2,... FROM db_name.tbl_name;
</code></pre>
</li>
<li>
<p>给字段起别名，建议写上 AS</p>
<pre><code class="language-sql">SELECT 字段名称 [AS] 别名名称,... FROM db_name.tbl_name;
</code></pre>
</li>
<li>
<p>给数据表起别名</p>
<pre><code class="language-sql">SELECT 字段名称1,字段名称2,... FROM tbl_name [AS] 别名;
</code></pre>
</li>
<li>
<p>表名.字段名的形式</p>
<pre><code class="language-sql">SELECT tbl_name.col_name,... FROM tbl_name;
</code></pre>
</li>
<li>
<p>WHERE 条件</p>
<p>会筛选出所有符合条件的记录</p>
<ul>
<li>
<p>比较运算符：</p>
<pre><code class="language-txt">&gt; &gt;= &lt;= != &lt;&gt; &lt;=&gt;
注意 &lt;=&gt; 和 = 的区别
&lt;=&gt; 可以检测出NULL值
</code></pre>
</li>
<li>
<p>IS [NOT] NULL：检测值是否为NULL 或者 NOT NULL</p>
</li>
<li>
<p>指定范围</p>
<pre><code class="language-sql">[NOT] BETWEEN ... AND
</code></pre>
</li>
<li>
<p>指定集合</p>
<pre><code class="language-sql">[NOT] IN (值1,值2,...)
</code></pre>
</li>
<li>
<p>逻辑运算符</p>
<pre><code class="language-shell">AND 逻辑与
OR  逻辑或
</code></pre>
</li>
<li>
<p>匹配字符</p>
<pre><code class="language-sql">[NOT] LIKE
% 任意长度的字符串
_ 任意一个字符
</code></pre>
<pre><code class="language-sql">SELECT id,username,age FROM user1
WHERE username like '%in%';
id|username|age
1 |king    |23
</code></pre>
<p>查询出叫张xx的人，使用'_'</p>
<pre><code class="language-sql">SELECT id,username,age FROM user1
WHERE username like '张__';
id|username|age
1 |张三丰   |23
</code></pre>
</li>
</ul>
</li>
<li>
<p>GROUP BY 分组</p>
<ol>
<li>
<p>把值相同放到一个组中，最终查询出的结果只会显示组中一条记录</p>
</li>
<li>
<p>分组配合GROUP_CONCAT()查看组中某个字段的详细信息</p>
<pre><code class="language-sql">SELECT GROUP_CONCAT(username),age,sex FROM user1 GROUP BY sex;
GROUP_CONCAAT(username)|age|sex
吴亦凡,张三,张四,王五,赵六 |23 |男
章子怡,刘嘉玲,奶茶妹      |18 |女
</code></pre>
</li>
<li>
<p>配合聚合函数使用</p>
<table>
<thead>
<tr>
<th>聚合函数名</th>
<th>统计记录总数</th>
</tr>
</thead>
<tbody>
<tr>
<td>COUNT()</td>
<td>统计记录总数</td>
</tr>
<tr>
<td>COUNT(字段名称)</td>
<td>字段中为NULL的值，不会被统计进来</td>
</tr>
<tr>
<td>COUNT（*）</td>
<td>会同时统计NULL值</td>
</tr>
<tr>
<td>SUM（）</td>
<td>求和</td>
</tr>
<tr>
<td>MAX（）</td>
<td>求最大值</td>
</tr>
<tr>
<td>MIN（）</td>
<td>求最小值</td>
</tr>
<tr>
<td>AVG（）</td>
<td>求平均值</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>配合WITH ROLLUP 关键词使用：会在记录末尾添加一条记录，是上面所有记录的总和</p>
</li>
<li>
<p>HAVING字句对分组结果进行二次筛选（WHERE是一次筛选）</p>
</li>
</ol>
</li>
<li>
<p>ORDER BY 排序：ORDER BY 字段名称 ASC|DESC / ORDER BY rand() 随机排序</p>
<pre><code class="language-sql">按照多个字段排序
SELECT id,username,age
FROM user1
ORDER BY age ASC, id ASC;
</code></pre>
</li>
<li>
<p>LIMIT 限制结果集合显示条数</p>
<ol>
<li>LIMIT值：显示结果集的前几条记录</li>
<li>LIMIT offset,row_count：从offset开始，显示几条记录，offset从0开始。</li>
</ol>
</li>
</ol>
<h2 id="5-多表查询">5. 多表查询</h2>
<ol>
<li>
<p>笛卡尔积的形式</p>
<p>表1：4条 / 表2：6条 / total：24条</p>
</li>
<li>
<p>内连接的形式：用的比较多</p>
<ul>
<li>
<p>相当于两个集合取交集，只取都符合条件的</p>
</li>
<li>
<p>查询两个表中符合连接条件的记录</p>
<pre><code class="language-sql">SELECT 字段名称1,... FROM tbl_name1
INNER JOIN tbl_name2
ON 条件
</code></pre>
</li>
</ul>
</li>
<li>
<p>外连接</p>
<ul>
<li>
<p>左外连接：以左表为主</p>
<pre><code class="language-sql">SELECT 字段名称1,... FROM tbl_name1
LEFT [OUTER] JOIN tbl_name2
ON 条件;
</code></pre>
<p><strong>先显示左表中的全部记录，再去右表中查询符合条件的记录，不符合的以NULL代替</strong></p>
</li>
<li>
<p>右外连接：以右表为主</p>
<pre><code class="language-sql">SELECT 字段名称1,... FROM tbl_name1
RIGHT [OUTER] JOIN tbl_name2
ON 条件;
</code></pre>
<p><strong>先显示右表中的全部记录，再去左表中查询复合条件的记录，不符合的以NULL代替</strong></p>
</li>
<li>
<p>全外连接：full outer join 全部都取出来</p>
</li>
</ul>
</li>
</ol>
<h2 id="6-外键约束">6. 外键约束</h2>
<p><strong>只有InnoDB存储引擎支持外键</strong></p>
<ol>
<li>创建外键</li>
</ol>
<ul>
<li>
<p>建表时候指定外键</p>
<pre><code class="language-sql">[CONSTRAINT 外键名称]FOREIGN KEY(字段名称) REFERENCES 主表(字段名称)
</code></pre>
<ul>
<li>子表的外键字段和主表的外键字段类型要相似;
<ul>
<li>如果是数值型要求一致,并且无符号也要一致</li>
<li>如果是字符型，要求类型一致，长度可以不同</li>
</ul>
</li>
<li>如果外键字段没有创建索引，MySQL会自动帮我们添加索引</li>
<li>子表的外键关联的必须是父表的主键</li>
<li>外键约束的参照操作
<ol>
<li><code>CASCADE</code>：从附表删除或更新，子表也跟着删除或者更新，级联的操作</li>
<li><code>SET NULL</code>：从附表删除或者更新记录，并且设置子表的外键列为NULL</li>
<li><code>NO ACTION | RESTRICT</code>：拒绝对父表做更新或者删除操作</li>
</ol>
</li>
</ul>
</li>
<li>
<p>动态添加外键</p>
<ul>
<li>
<p>动态添加外键</p>
<pre><code class="language-sql">ALTER TABLE tbl_name
ADD [CONSTRAINT 外键名称] FOREIGN KEY(外键字段) REFERENCES 主表(主键字段);
</code></pre>
<ul>
<li>动态添加外键之前表中的记录一定都是合法的记录，没有脏值，否则外键添加不成功</li>
</ul>
</li>
<li>
<p>动态删除外键</p>
<pre><code class="language-sql">ALTER TABLE tbl_name
DROP FOREIGN KEY fk_name;
</code></pre>
</li>
</ul>
</li>
</ul>
<h2 id="7-特殊形式的查询">7. 特殊形式的查询</h2>
<ol>
<li>
<p>子查询</p>
<ul>
<li>
<p>通过<code>SELECT</code>字段</p>
<pre><code class="language-sql">SELECT 字段名称 FROM tbl_name WHERE col_name = (SELECT col_name FROM tbl_name);
</code></pre>
</li>
<li>
<p>内层语句查询的结果可以作为外层语句查询的条件</p>
</li>
<li>
<p>由<code>IN</code>引发的子查询</p>
<pre><code class="language-sql">SELECT * FROM emp
WHERE depId IN (SELECT id FROM dep);
</code></pre>
</li>
<li>
<p>由比较运算符引出子查询</p>
<pre><code class="language-sql">-- 查询出成绩最优
SELECT id,username,score FROM stu
WHERE score &gt;= (SELECT score FROM level where id = 1);
</code></pre>
</li>
<li>
<p>由<code>EXIST</code>引发的子查询:返回<code>bool</code>类型的结果,子查询为<code>true</code>才执行前面的语句</p>
<pre><code class="language-sql">SELECT depName from del
WHERE EXISTS (SELECT depName FROM dep WHERE id=10);
</code></pre>
</li>
<li>
<p>三个关键字<code>ANY</code> <code>SOME</code> <code>ALL</code></p>
<table>
<thead>
<tr>
<th>运算符\关键字</th>
<th>ANY</th>
<th>SOME</th>
<th>ALL</th>
</tr>
</thead>
<tbody>
<tr>
<td>&gt;、&gt;=</td>
<td>最小值</td>
<td>最小值</td>
<td>最大值</td>
</tr>
<tr>
<td>&lt;、&lt;=</td>
<td>最大值</td>
<td>最大值</td>
<td>最小值</td>
</tr>
<tr>
<td>=</td>
<td>任意值</td>
<td>任意值</td>
<td></td>
</tr>
<tr>
<td>&lt;&gt;、!=</td>
<td></td>
<td></td>
<td>任意值</td>
</tr>
</tbody>
</table>
<pre><code class="language-sql">SELECT * FROM stu
WHERE score &gt;= ANY(SELECT score FROM level);
or
WHERE score &gt;= SOME(SELECT score FROM level);
or
WHERE score &gt;= ALL(SELECT score FROM level);
</code></pre>
</li>
<li>
<p><code>INSERT ... SELECT</code> 的形式</p>
<pre><code class="language-sql">INSERT user2 SELECT id,username FROM user1;
</code></pre>
</li>
<li>
<p><code>CREATE ... SELECT</code> 的形式</p>
<pre><code class="language-sql">CREATE TABLE user1(
	id int UNSIGNED AUTO_INCREMENT KEY,
  username VARCHAR(20)
)SELECT id,username FROM emp;
</code></pre>
</li>
<li>
<p><code>CREATE TABLE tbl_name LIKE tbl_name</code> 的形式创建一个表(新表中没有数据)</p>
</li>
</ul>
</li>
<li>
<p>联合查询</p>
<ul>
<li>
<p><code>UNION</code></p>
<pre><code class="language-sql">SELECT 字段名称1,字段名称2... FROM tbl_name1
UNION
SELECT 字段名称3,字段名称4... FROM tbl_name2;
</code></pre>
</li>
<li>
<p><code>UNION ALL</code></p>
<pre><code class="language-sql">SELECT 字段名称1,字段名称2... FROM tbl_name1 
UNION ALL
SELECT 字段名称3,字段名称4... FROM tbl_name2;
</code></pre>
</li>
<li>
<p><code>UNION ALL</code> 是简单的合并，<code>UNION</code> 会去掉表中重复记录</p>
</li>
</ul>
</li>
<li>
<p>自身连接查询</p>
<ul>
<li><strong>无限级分类的实现形式</strong></li>
</ul>
</li>
</ol>
]]></content>
    </entry>
</feed>